Caso - Redis API

Objetivo
El challenge consta de implementar una cola de mensajes utilizando un Redis y además implementar una
API que nos permita abstraernos.
La misma deberá estar conformada por métodos (endpoints) que debe cumplir con el siguiente contrato:

A. Pop
Este método lo que hará es recibir obtener el primer valor de la lista de elementos en la queue y eliminarlo de
la misma.

● POST /api/queue/pop

Respuestas:
● en el caso de encontrarlo
○ Status: 200
○ ‘message’: <msg>

● en el caso de que no pueda crearlo
○ Status: 500
○ ‘message’: <msg>

Ejemplo:
● Request
○ POST /api/queue/pop
● Response
○ HTTP/1.1 200 OK
○ ‘message’: “body del mensaje”

B. Push.
Este método lo que hará es enviar un nuevo mensaje a la queue.

● POST /api/queue/push

Parámetros:
Nombre Tipo Descripción
message string Envía el mensaje

Respuestas:
● en el caso de poder crearlo
○ Status: 200
● en el caso de que los parámetros estén mal
○ Status: 404
● en el caso de que no pueda crearlo
○ Status: 500

Ejemplo:
● Request:
○ POST /api/queue/push
○ {“message”:”Pusheo un mensaje”}
● Response:
○ HTTP/1.1 200 OK
○ {“message”: “Pusheo un mensaje”}

B. Obtener Cantidad de Mensajes.
Este método lo que hará es chequear la cantidad de mensajes existentes en la cola pendientes de
procesamiento.

● GET /api/queue/count

Respuestas:
● en el caso de poder crearlo
○ Status: 200
● en caso de no encontrarlo
○ Status: 404

Ejemplo:
● Request:
○ GET /api/queue/count
● Response:
○ HTTP/1.1 200 OK
○ {“count”: 351}

Consideraciones generales

A tener en cuenta:
● Se podrán crear todas las funciones complementarias que se consideren necesarias para un
correcto funcionamiento de la aplicación.
● Se recomienda modularizar y aplicar buenas prácticas de programación para un mejor
entendimiento del código.
● Se considerará durante la evaluación el manejo de errores, de autenticación y la documentación del
código.

Bonus (opcionales):
● Dockerizar la aplicación
● Tener el código en Github
● Hacer test unitarios y de integración
● Agregar funcionalidad a la api y cola. (Ej: autenticación de la api, logs, pop y push en batch, métricas,
lo que se te ocurra)
● Endpoint de estado de salud de Redis.
● Documentación de cómo se implementó, si hay credenciales, cómo ejecutarlo,detalle de mejoras
implementadas.

Entregables (via email):
● Código fuente (en zip o url al repositorio) e instrucciones para levantar la API
● Descripción de la aplicación realizada, problemas y soluciones con los que se encontró al realizar
esta API.

SOLUCION

1. Entendiendo el problema...

Fuentes de informacion para entender el problema:
https://laingenieria.info/questions/2191/como-implementar-una-cola-de-mensajes-en-redis
https://aws.amazon.com/es/elasticache/what-is-redis/
https://www.ibm.com/support/knowledgecenter/es/SSFKSJ_7.5.0/com.ibm.mq.pro.doc/q002620_.htm
https://www.youtube.com/watch?v=mM_SROJZGwQ&t=311s
https://gamedevelopment.tutsplus.com/es/tutorials/how-to-implement-and-use-a-message-queue-in-your-game--cms-25407
https://progexpertos.com/q/107564/redis-queue-rq-task-queues-in-production
https://geekflare.com/es/queuing-systems-for-backend-developers/
Pop=sacar elemento
Push=meter elemento




2. Elementos para el desarrollo de la solucion:
Una BD: Redis, porque? requerido en la consigna
Un editor de texto: Visual code, porque? recomendado en algun video
Un framework: NodeJS, porque? despues de muchos tutoriales de diferentes lenguajes de programacion, aparentemente este era sencillo
Algo para insertar y consultar info: postman. porque? recomendacion especifica para ahorrar el desarrollo de la API

->NodeJS
Porque elegir NodeJS
https://www.toptal.com/nodejs/por-que-demonios-usaria-node-js-un-tutorial-caso-por-caso
Descarga NodeJS
https://nodejs.org/es/download/
Modulos adicionales de NodeJS
https://expressjs.com/es/starter/installing.html
Entendiendo los metodos de NodeJS
https://www.tutorialspoint.com/nodejs/nodejs_restful_api.htm

->Redis
Entendiendo redis
https://www.youtube.com/watch?v=fOG3WZTjpWs
Comandos redis
set= poblar la BD //  set mikey "hola cone"
get= obtener info // get mikey
del = borrar info // del mikey
incr 
decr 
rpush mylist A //agregar elemento a la lista desde la derecha
lrange mylist 0 0 // consultar elementos de la lista desde la izq, en este caso devuelve "A"
rpush mylist B
rpush mylist C
lrange mylist 0 2 // consultar elementos de la lista desde la izq, en este caso devuelve "A" "B" "C"
lrange mylist 0 -1 // consultar total elementos de la lista desde la izq, en este caso devuelve "A" "B" "C"
rpush mylist D E F G H // agregar multimples elementos desde la derecha
lpush mylist Z Y X // agregar multiples elementos desde la izquierda
lrange mylist 0 -1 // consulta total elementos de la lista ordenados desde la izquierda, en este caso devuelve X Y Z A B C D E F G H
rpop mylist //para sacar el ultimo elemento de la derecha
lpop mylist //para sacar el ultimo elemento de la izquierda
llen mylist//devuelve el tamaño de la lista
ltrim mylist 7 10// cortar la lista desde x elemento hasta y elemento

3. Entorno de trabajo
Windows 10: sistema operativo base
Postman 7.36.1: plataforma de colaboracion para desarrollo de API. En mi caso use el apli client que viene por defecto
NodeJS 14.15.4: el framework para desarrollar
Redis 3.2.100: es la base de datos. Se usa la version para windows

4. Conectando todo con todo
Como instalar redis en windows y descarga
https://www.youtube.com/watch?v=lwcikOT97lc&list=PLCTD_CpMeEKRjdM94onQPs3qTISaPkmxa&index=2
https://github.com/MicrosoftArchive/redis/releases
https://www.youtube.com/watch?v=MqieSnSv4ik
Instalando componente para que NodeJS hable con Redis
https://www.sitepoint.com/using-redis-node-js/#:~:text=%20Using%20Redis%20with%20Node.js%20%201%20Installing,let%E2%80%99s%20see%20how%20to%20store%20key-value...%20More%20
https://www.npmjs.com/package/redis
Como instalar y comenzar con nodejs
https://www.youtube.com/watch?v=BhvLIzVL8_o
Verificacion en consola
https://www.postman.com/downloads/

5. Armando la solucion
Definiendo la Arquitectura de la solucion
https://soshace.com/how-to-architect-a-node-js-project-from-ground-up/
Interaccion con Redis usando NodeJS
http://ualmtorres.github.io/howtos/RedisNodeJS/
Documentacion de colas en nodejs
https://blog.logrocket.com/a-deep-dive-into-queues-in-node-js/
Para hacer la cuenta de items en redis desde nodejs
https://stackoverflow.com/questions/18056518/number-of-items-in-redis-set
https://stackoverflow.com/questions/33618849/how-can-i-get-the-count-of-keys-in-redis


